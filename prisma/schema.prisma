generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  email           String           @unique
  name            String?
  image           String?
  role            Role             @default(USER)
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  emailVerified   DateTime?
  accounts        Account[]
  interactions    Interaction[]
  personas        Persona[]
  personaVersions PersonaVersion[]
  researchData    ResearchData[]
  sessions        Session[]
  timelineEvents  TimelineEvent[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Persona {
  id                    String           @id @default(cuid())
  name                  String
  age                   Int?
  occupation            String?
  location              String?
  introduction          String?
  personalityTraits     Json?
  interests             Json?
  gadgets               Json?
  metadata              Json?
  currentVersion        String?
  isTemplate            Boolean          @default(false)
  parentId              String?
  tags                  Json?
  profileImage          String?
  attachments           Json?
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  createdBy             String
  allowComments         Boolean          @default(false)
  isPublic              Boolean          @default(false)
  shareCount            Int              @default(0)
  shareToken            String?          @unique
  sharedAt              DateTime?
  appliedSuggestions    Json?
  inclusivityAttributes Json?
  interactions          Interaction[]
  creator               User             @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  parent                Persona?         @relation("PersonaBranching", fields: [parentId], references: [id])
  children              Persona[]        @relation("PersonaBranching")
  versions              PersonaVersion[]
  researchData          ResearchData[]
  timelineEvents        TimelineEvent[]

  @@index([appliedSuggestions], map: "idx_persona_applied_suggestions", type: Gin)
  @@index([inclusivityAttributes], map: "idx_persona_inclusivity_attributes", type: Gin)
}

model Interaction {
  id                    String          @id @default(cuid())
  personaId             String
  userId                String
  content               String
  response              String
  sessionId             String?
  context               Json?
  sentiment             Float?
  topics                Json?
  insights              Json?
  relatedResearchIds    Json?
  generateTimelineEvent Boolean         @default(false)
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  persona               Persona         @relation(fields: [personaId], references: [id], onDelete: Cascade)
  user                  User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  timelineEvents        TimelineEvent[]

  @@index([personaId, createdAt])
  @@index([sessionId])
}

model PersonaVersion {
  id         String   @id @default(cuid())
  personaId  String
  version    String
  name       String
  snapshot   Json
  changes    Json?
  branchFrom String?
  branchName String?
  isActive   Boolean  @default(false)
  isDraft    Boolean  @default(true)
  notes      String?
  createdAt  DateTime @default(now())
  createdBy  String
  creator    User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  persona    Persona  @relation(fields: [personaId], references: [id], onDelete: Cascade)

  @@unique([personaId, version])
}

model ResearchData {
  id             String          @id @default(cuid())
  personaId      String
  title          String
  description    String?
  content        String
  fileUrl        String?
  fileName       String?
  fileType       String?
  fileSize       Int?
  category       String
  tags           Json?
  source         String?
  relevantDate   DateTime?
  confidence     Float?
  verified       Boolean         @default(false)
  insights       Json?
  connections    Json?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  createdBy      String
  creator        User            @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  persona        Persona         @relation(fields: [personaId], references: [id], onDelete: Cascade)
  timelineEvents TimelineEvent[]

  @@index([personaId, category])
  @@index([personaId, relevantDate])
}

model TimelineEvent {
  id             String        @id @default(cuid())
  personaId      String
  title          String
  description    String?
  eventType      String
  eventDate      DateTime
  endDate        DateTime?
  isEstimated    Boolean       @default(false)
  researchDataId String?
  interactionId  String?
  importance     Int           @default(5)
  category       String?
  tags           Json?
  metadata       Json?
  color          String?
  icon           String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  createdBy      String
  creator        User          @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  interaction    Interaction?  @relation(fields: [interactionId], references: [id])
  persona        Persona       @relation(fields: [personaId], references: [id], onDelete: Cascade)
  researchData   ResearchData? @relation(fields: [researchDataId], references: [id])

  @@index([personaId, eventDate])
  @@index([personaId, eventType])
}

enum Role {
  USER
  ADMIN
}
