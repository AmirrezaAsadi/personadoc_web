generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // NextAuth fields
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]

  personas     Persona[]
  interactions Interaction[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Persona {
  id          String   @id @default(cuid())
  name        String
  age         Int?
  occupation  String?
  location    String?
  introduction String?
  
  personalityTraits Json?
  interests        Json?
  gadgets          Json?
  
  createdAt DateTime @default(now())
  createdBy String
  
  creator      User          @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  interactions Interaction[]
}

model Interaction {
  id        String   @id @default(cuid())
  personaId String
  userId    String
  content   String
  response  String
  createdAt DateTime @default(now())

  persona Persona @relation(fields: [personaId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}
